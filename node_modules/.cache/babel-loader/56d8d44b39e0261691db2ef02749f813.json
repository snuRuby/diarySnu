{"ast":null,"code":"import _defineProperty from \"/Users/ruby/Desktop/\\uC218\\uC5C5/2020-1/\\u1107\\u1166\\u11AB\\u110E\\u1161\\u11BC\\u110B\\u1170\\u11B82/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _handleActions;\n\nimport { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\"; // action types\n\nvar INITIALIZE = \"licenses/INITIALIZE\";\nvar SET_LICENSE = \"licenses/SET_LICENSE\";\nvar SET_PRICE = \"licenses/SET_PRICE\"; // action creators\n\nexport var initialize = createAction(INITIALIZE);\nexport var setLicense = createAction(SET_LICENSE);\nexport var setPrice = createAction(SET_PRICE); // initial state\n\nvar initialState = Map({\n  standard: Map({\n    checked: false,\n    price: null\n  }),\n  premium: Map({\n    checked: false,\n    price: null\n  }),\n  unlimited: Map({\n    checked: false,\n    price: null\n  })\n}); // reducer\n\nexport default handleActions((_handleActions = {}, _defineProperty(_handleActions, INITIALIZE, function (state, action) {\n  return initialState;\n}), _defineProperty(_handleActions, SET_LICENSE, function (state, action) {\n  var _action$payload = action.payload,\n      name = _action$payload.name,\n      checked = _action$payload.checked;\n  return state.setIn([name, \"checked\"], checked);\n}), _defineProperty(_handleActions, SET_PRICE, function (state, action) {\n  var _action$payload2 = action.payload,\n      name = _action$payload2.name,\n      price = _action$payload2.price;\n  return state.setIn([name, \"price\"], price);\n}), _handleActions), initialState);","map":{"version":3,"sources":["/Users/ruby/Desktop/수업/2020-1/벤창웹2/frontend/src/store/modules/licenses.js"],"names":["createAction","handleActions","Map","INITIALIZE","SET_LICENSE","SET_PRICE","initialize","setLicense","setPrice","initialState","standard","checked","price","premium","unlimited","state","action","payload","name","setIn"],"mappings":";;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,QAA4C,eAA5C;AACA,SAASC,GAAT,QAAoB,WAApB,C,CAEA;;AACA,IAAMC,UAAU,GAAG,qBAAnB;AAEA,IAAMC,WAAW,GAAG,sBAApB;AACA,IAAMC,SAAS,GAAG,oBAAlB,C,CAEA;;AACA,OAAO,IAAMC,UAAU,GAAGN,YAAY,CAACG,UAAD,CAA/B;AAEP,OAAO,IAAMI,UAAU,GAAGP,YAAY,CAACI,WAAD,CAA/B;AACP,OAAO,IAAMI,QAAQ,GAAGR,YAAY,CAACK,SAAD,CAA7B,C,CAEP;;AACA,IAAMI,YAAY,GAAGP,GAAG,CAAC;AACvBQ,EAAAA,QAAQ,EAAER,GAAG,CAAC;AACZS,IAAAA,OAAO,EAAE,KADG;AAEZC,IAAAA,KAAK,EAAE;AAFK,GAAD,CADU;AAKvBC,EAAAA,OAAO,EAAEX,GAAG,CAAC;AACXS,IAAAA,OAAO,EAAE,KADE;AAEXC,IAAAA,KAAK,EAAE;AAFI,GAAD,CALW;AASvBE,EAAAA,SAAS,EAAEZ,GAAG,CAAC;AACbS,IAAAA,OAAO,EAAE,KADI;AAEbC,IAAAA,KAAK,EAAE;AAFM,GAAD;AATS,CAAD,CAAxB,C,CAeA;;AACA,eAAeX,aAAa,uDAEvBE,UAFuB,EAEV,UAACY,KAAD,EAAQC,MAAR;AAAA,SAAmBP,YAAnB;AAAA,CAFU,mCAGvBL,WAHuB,EAGT,UAACW,KAAD,EAAQC,MAAR,EAAmB;AAAA,wBACNA,MAAM,CAACC,OADD;AAAA,MACxBC,IADwB,mBACxBA,IADwB;AAAA,MAClBP,OADkB,mBAClBA,OADkB;AAEhC,SAAOI,KAAK,CAACI,KAAN,CAAY,CAACD,IAAD,EAAO,SAAP,CAAZ,EAA+BP,OAA/B,CAAP;AACD,CANuB,mCAOvBN,SAPuB,EAOX,UAACU,KAAD,EAAQC,MAAR,EAAmB;AAAA,yBACNA,MAAM,CAACC,OADD;AAAA,MACtBC,IADsB,oBACtBA,IADsB;AAAA,MAChBN,KADgB,oBAChBA,KADgB;AAE9B,SAAOG,KAAK,CAACI,KAAN,CAAY,CAACD,IAAD,EAAO,OAAP,CAAZ,EAA6BN,KAA7B,CAAP;AACD,CAVuB,oBAY1BH,YAZ0B,CAA5B","sourcesContent":["import { createAction, handleActions } from \"redux-actions\";\nimport { Map } from \"immutable\";\n\n// action types\nconst INITIALIZE = \"licenses/INITIALIZE\";\n\nconst SET_LICENSE = \"licenses/SET_LICENSE\";\nconst SET_PRICE = \"licenses/SET_PRICE\";\n\n// action creators\nexport const initialize = createAction(INITIALIZE);\n\nexport const setLicense = createAction(SET_LICENSE);\nexport const setPrice = createAction(SET_PRICE);\n\n// initial state\nconst initialState = Map({\n  standard: Map({\n    checked: false,\n    price: null\n  }),\n  premium: Map({\n    checked: false,\n    price: null\n  }),\n  unlimited: Map({\n    checked: false,\n    price: null\n  })\n});\n\n// reducer\nexport default handleActions(\n  {\n    [INITIALIZE]: (state, action) => initialState,\n    [SET_LICENSE]: (state, action) => {\n      const { name, checked } = action.payload;\n      return state.setIn([name, \"checked\"], checked);\n    },\n    [SET_PRICE]: (state, action) => {\n      const { name, price } = action.payload;\n      return state.setIn([name, \"price\"], price);\n    }\n  },\n  initialState\n);\n"]},"metadata":{},"sourceType":"module"}