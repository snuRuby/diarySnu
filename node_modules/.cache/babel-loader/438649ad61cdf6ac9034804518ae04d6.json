{"ast":null,"code":"import _toConsumableArray from\"/Users/donghoon/works/movie/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/donghoon/works/movie/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Box,CircularProgress,MenuItem,TextField}from'@material-ui/core';import React,{useEffect,useState}from'react';import{useApi}from'../util';import{MovieCard}from'../components';import{useHistory}from'react-router-dom';var Main=function Main(){var api=useApi();var _useState=useState(),_useState2=_slicedToArray(_useState,2),movies=_useState2[0],setMovies=_useState2[1];var _useState3=useState('All'),_useState4=_slicedToArray(_useState3,2),genre=_useState4[0],setGenre=_useState4[1];var history=useHistory();useEffect(function(){api.getMovies().then(setMovies);},[api]);if(!movies){return/*#__PURE__*/React.createElement(CircularProgress,null);}var genresArray=[];movies.forEach(function(_ref){var genres=_ref.genres;genresArray=[].concat(_toConsumableArray(genresArray),_toConsumableArray(genres||[]));});var genres=['All'].concat(_toConsumableArray(new Set(genresArray)));var filteredMovies=movies.filter(function(movie){var _movie$genres;return genre==='All'?true:(_movie$genres=movie.genres)===null||_movie$genres===void 0?void 0:_movie$genres.includes(genre);});return/*#__PURE__*/React.createElement(Box,null,/*#__PURE__*/React.createElement(TextField,{label:\"Genres\",onChange:function onChange(_ref2){var value=_ref2.target.value;return setGenre(value);},select:true,value:genre},genres.map(function(g){return/*#__PURE__*/React.createElement(MenuItem,{key:g,value:g},g);})),filteredMovies.map(function(_ref3){var description_full=_ref3.description_full,id=_ref3.id,medium_cover_image=_ref3.medium_cover_image,title=_ref3.title;return/*#__PURE__*/React.createElement(MovieCard,{description:description_full,img:medium_cover_image,key:id,onClick:function onClick(){return history.push(\"\".concat(id));},title:title});}));};export default Main;","map":{"version":3,"sources":["/Users/donghoon/works/movie/src/pages/Main.jsx"],"names":["Box","CircularProgress","MenuItem","TextField","React","useEffect","useState","useApi","MovieCard","useHistory","Main","api","movies","setMovies","genre","setGenre","history","getMovies","then","genresArray","forEach","genres","Set","filteredMovies","filter","movie","includes","value","target","map","g","description_full","id","medium_cover_image","title","push"],"mappings":"oOAAA,OAASA,GAAT,CAAcC,gBAAd,CAAgCC,QAAhC,CAA0CC,SAA1C,KAA2D,mBAA3D,CACA,MAAOC,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CAEA,OAASC,MAAT,KAAuB,SAAvB,CACA,OAASC,SAAT,KAA0B,eAA1B,CACA,OAASC,UAAT,KAA2B,kBAA3B,CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,EAAM,CACjB,GAAMC,CAAAA,GAAG,CAAGJ,MAAM,EAAlB,CADiB,cAEWD,QAAQ,EAFnB,wCAEVM,MAFU,eAEFC,SAFE,8BAGSP,QAAQ,CAAC,KAAD,CAHjB,yCAGVQ,KAHU,eAGHC,QAHG,eAIjB,GAAMC,CAAAA,OAAO,CAAGP,UAAU,EAA1B,CAEAJ,SAAS,CAAC,UAAM,CAAEM,GAAG,CAACM,SAAJ,GAAgBC,IAAhB,CAAqBL,SAArB,EAAiC,CAA1C,CAA4C,CAACF,GAAD,CAA5C,CAAT,CAEA,GAAI,CAACC,MAAL,CAAa,CACX,mBAAO,oBAAC,gBAAD,MAAP,CACD,CAED,GAAIO,CAAAA,WAAW,CAAG,EAAlB,CACAP,MAAM,CAACQ,OAAP,CAAe,cAAgB,IAAbC,CAAAA,MAAa,MAAbA,MAAa,CAC7BF,WAAW,8BAAOA,WAAP,qBAAuBE,MAAM,EAAI,EAAjC,EAAX,CACD,CAFD,EAGA,GAAMA,CAAAA,MAAM,EAAI,KAAJ,4BAAc,GAAIC,CAAAA,GAAJ,CAAQH,WAAR,CAAd,EAAZ,CACA,GAAMI,CAAAA,cAAc,CAAGX,MAAM,CAACY,MAAP,CAAc,SAACC,KAAD,0BAAYX,CAAAA,KAAK,GAAK,KAAV,CAAkB,IAAlB,gBAAyBW,KAAK,CAACJ,MAA/B,wCAAyB,cAAcK,QAAd,CAAuBZ,KAAvB,CAArC,EAAd,CAAvB,CAEA,mBACE,oBAAC,GAAD,mBACE,oBAAC,SAAD,EACE,KAAK,CAAC,QADR,CAEE,QAAQ,CAAE,4BAAaa,CAAAA,KAAb,OAAGC,MAAH,CAAaD,KAAb,OAA2BZ,CAAAA,QAAQ,CAACY,KAAD,CAAnC,EAFZ,CAGE,MAAM,KAHR,CAIE,KAAK,CAAEb,KAJT,EAMGO,MAAM,CAACQ,GAAP,CAAW,SAACC,CAAD,qBAAO,oBAAC,QAAD,EAAU,GAAG,CAAEA,CAAf,CAAkB,KAAK,CAAEA,CAAzB,EAA6BA,CAA7B,CAAP,EAAX,CANH,CADF,CASGP,cAAc,CAACM,GAAf,CAAmB,mBAAEE,CAAAA,gBAAF,OAAEA,gBAAF,CAAoBC,EAApB,OAAoBA,EAApB,CAAwBC,kBAAxB,OAAwBA,kBAAxB,CAA4CC,KAA5C,OAA4CA,KAA5C,oBACpB,oBAAC,SAAD,EACE,WAAW,CAAEH,gBADf,CAEE,GAAG,CAAEE,kBAFP,CAGE,GAAG,CAAED,EAHP,CAIE,OAAO,CAAE,yBAAMhB,CAAAA,OAAO,CAACmB,IAAR,WAAgBH,EAAhB,EAAN,EAJX,CAKE,KAAK,CAAEE,KALT,EADoB,EAAnB,CATH,CADF,CAoBD,CAvCD,CAyCA,cAAexB,CAAAA,IAAf","sourcesContent":["import { Box, CircularProgress, MenuItem, TextField } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\n\nimport { useApi } from '../util';\nimport { MovieCard } from '../components';\nimport { useHistory } from 'react-router-dom';\n\nconst Main = () => {\n  const api = useApi();\n  const [movies, setMovies] = useState();\n  const [genre, setGenre] = useState('All');\n  const history = useHistory();\n\n  useEffect(() => { api.getMovies().then(setMovies) }, [api]);\n\n  if (!movies) {\n    return <CircularProgress />;\n  }\n\n  let genresArray = [];\n  movies.forEach(({ genres }) => {\n    genresArray = [...genresArray, ...genres || []];\n  });\n  const genres = ['All', ...new Set(genresArray)];\n  const filteredMovies = movies.filter((movie) => (genre === 'All' ? true : movie.genres?.includes(genre)));\n\n  return (\n    <Box>\n      <TextField\n        label=\"Genres\"\n        onChange={({ target: { value } }) => setGenre(value)}\n        select\n        value={genre}\n      >\n        {genres.map((g) => <MenuItem key={g} value={g}>{g}</MenuItem>)}\n      </TextField>\n      {filteredMovies.map(({description_full, id, medium_cover_image, title }) => (\n      <MovieCard\n        description={description_full}\n        img={medium_cover_image}\n        key={id}\n        onClick={() => history.push(`${id}`)}\n        title={title}\n      />))}\n    </Box>\n  );\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}