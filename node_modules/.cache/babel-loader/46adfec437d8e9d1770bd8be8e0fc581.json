{"ast":null,"code":"import * as firebase from 'firebase/app';\nimport 'firebase/database';\nexport default class Api {\n  constructor() {\n    this.basePath = '/data/movies';\n    this.database = firebase.database().ref(this.basePath).once('value').then(d => d.val());\n  }\n\n  async getMovies() {\n    const movies = await this.database.once('value');\n    return movies.val();\n  }\n\n  async getMovie(id) {\n    const movie = await this.database.orderByChild('id').equalTo(id).once('value');\n    return movie.val();\n  }\n\n  makeHeaders(auth = false) {\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded'\n    };\n    if (auth) headers.Authorization = `Key ${localStorage.getItem('key')}`;\n    return headers;\n  }\n\n  signup(name) {\n    return fetch(`${this.BASE_URL}/signup`, {\n      method: 'POST',\n      headers: this.makeHeaders(),\n      body: `name=${name}`\n    }).then(res => res.json()).then(({\n      key\n    }) => localStorage.setItem('key', key));\n  }\n\n  login() {\n    return fetch(`${this.BASE_URL}/login`, {\n      method: 'POST',\n      headers: this.makeHeaders(true)\n    }).then(res => res.json());\n  }\n\n  joinRoom(id) {\n    return fetch(`${this.BASE_URL}/rooms/${id}`, {\n      method: 'POST',\n      headers: this.makeHeaders(true)\n    }).then(res => res.json());\n  }\n\n  getRooms() {\n    return fetch(`${this.BASE_URL}/rooms`).then(res => res.json());\n  }\n\n  createRoom(name) {\n    return fetch(`${this.BASE_URL}/rooms`, {\n      method: 'POST',\n      headers: this.makeHeaders(true),\n      body: `name=${name}`\n    }).then(res => res.json());\n  }\n\n  getRoom(roomId) {\n    return fetch(`${this.BASE_URL}/rooms/${roomId}`).then(res => res.json());\n  }\n\n  getChats(roomId) {\n    return fetch(`${this.BASE_URL}/rooms/${roomId}/chats`).then(res => res.json());\n  }\n\n  sendMessage(roomId, message) {\n    return fetch(`${this.BASE_URL}/rooms/${roomId}/chats`, {\n      method: 'POST',\n      headers: this.makeHeaders(true),\n      body: `message=${message}`\n    }).then(res => res.json());\n  }\n\n}","map":{"version":3,"sources":["/Users/donghoon/works/movie/src/api/api.js"],"names":["firebase","Api","constructor","basePath","database","ref","once","then","d","val","getMovies","movies","getMovie","id","movie","orderByChild","equalTo","makeHeaders","auth","headers","Authorization","localStorage","getItem","signup","name","fetch","BASE_URL","method","body","res","json","key","setItem","login","joinRoom","getRooms","createRoom","getRoom","roomId","getChats","sendMessage","message"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase/app';\nimport 'firebase/database';\n\nexport default class Api {\n  constructor() {\n    this.basePath = '/data/movies';\n    this.database = firebase.database().ref(this.basePath).once('value').then((d) => d.val());\n  }\n\n  async getMovies() {\n    const movies = await this.database.once('value');\n    return movies.val();\n  }\n\n  async getMovie(id) {\n    const movie = await this.database.orderByChild('id').equalTo(id).once('value');\n    return movie.val();\n  }\n\n  makeHeaders(auth = false) {\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n    };\n    if (auth) headers.Authorization = `Key ${localStorage.getItem('key')}`;\n    return headers;\n  }\n\n  signup(name) {\n    return fetch(`${this.BASE_URL}/signup`, {\n      method: 'POST',\n      headers: this.makeHeaders(),\n      body: `name=${name}`,\n    })\n      .then((res) => res.json())\n      .then(({ key }) => localStorage.setItem('key', key));\n  }\n\n  login() {\n    return fetch(`${this.BASE_URL}/login`, {\n      method: 'POST',\n      headers: this.makeHeaders(true),\n    }).then((res) => res.json());\n  }\n\n  joinRoom(id) {\n    return fetch(`${this.BASE_URL}/rooms/${id}`, {\n      method: 'POST',\n      headers: this.makeHeaders(true),\n    }).then((res) => res.json());\n  }\n\n  getRooms() {\n    return fetch(`${this.BASE_URL}/rooms`).then((res) => res.json());\n  }\n\n  createRoom(name) {\n    return fetch(`${this.BASE_URL}/rooms`, {\n      method: 'POST',\n      headers: this.makeHeaders(true),\n      body: `name=${name}`,\n    }).then((res) => res.json());\n  }\n\n  getRoom(roomId) {\n    return fetch(`${this.BASE_URL}/rooms/${roomId}`).then((res) => res.json());\n  }\n\n  getChats(roomId) {\n    return fetch(`${this.BASE_URL}/rooms/${roomId}/chats`).then((res) => res.json());\n  }\n\n  sendMessage(roomId, message) {\n    return fetch(`${this.BASE_URL}/rooms/${roomId}/chats`, {\n      method: 'POST',\n      headers: this.makeHeaders(true),\n      body: `message=${message}`,\n    }).then((res) => res.json());\n  }\n}\n"]},"metadata":{},"sourceType":"module"}