{"ast":null,"code":"import _classCallCheck from \"/Users/ruby/Desktop/\\uC218\\uC5C5/2020-1/\\u1107\\u1166\\u11AB\\u110E\\u1161\\u11BC\\u110B\\u1170\\u11B82/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/ruby/Desktop/\\uC218\\uC5C5/2020-1/\\u1107\\u1166\\u11AB\\u110E\\u1161\\u11BC\\u110B\\u1170\\u11B82/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/ruby/Desktop/\\uC218\\uC5C5/2020-1/\\u1107\\u1166\\u11AB\\u110E\\u1161\\u11BC\\u110B\\u1170\\u11B82/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/ruby/Desktop/\\uC218\\uC5C5/2020-1/\\u1107\\u1166\\u11AB\\u110E\\u1161\\u11BC\\u110B\\u1170\\u11B82/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/ruby/Desktop/\\uC218\\uC5C5/2020-1/\\u1107\\u1166\\u11AB\\u110E\\u1161\\u11BC\\u110B\\u1170\\u11B82/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/ruby/Desktop/\\uC218\\uC5C5/2020-1/\\u1107\\u1166\\u11AB\\u110E\\u1161\\u11BC\\u110B\\u1170\\u11B82/frontend/src/containers/profile/ProfileContainer.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Redirect } from \"react-router-dom\";\nimport ProfileBody from \"components/profile/ProfileBody\";\nimport * as baseActions from \"store/modules/base\"; // TODO: 서버에서 프로필을 보려는 유저의 정보를 모두 받아온 뒤 profileBody의 props로 넘겨주어야 한다\n// TODO: 존재하지 않는 유저면 프로필 없음 페이지로 redirection 해야함\n\nvar ProfileContainer =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ProfileContainer, _Component);\n\n  function ProfileContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ProfileContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ProfileContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      redirect: false\n    };\n\n    _this.clickAddButton = function () {\n      return _this.setState({\n        redirect: true\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ProfileContainer, [{\n    key: \"render\",\n    value: function render() {\n      // currentUserid: 로그인한 유저의 아이디\n      // userid: 프로필 페이지 유저의 아이디\n      // 프로필 페이지는 내가 보든 남이 보든 똑같이 생겼지만 내 프로필 페이지라면 게시글을 올릴 수 있는 버튼 등을 활성하화기 위하여 isMyProfile 값을 넣어준다\n      var _this$props = this.props,\n          logged = _this$props.logged,\n          currentUserid = _this$props.currentUserid,\n          userid = _this$props.userid;\n      var isMyProfile = logged && currentUserid === userid;\n      var redirect = this.state.redirect;\n      if (redirect) return React.createElement(Redirect, {\n        to: \"/uploadBeat\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      });\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, React.createElement(ProfileBody, {\n        isMyProfile: isMyProfile,\n        userid: userid,\n        clickAddButton: this.clickAddButton,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return ProfileContainer;\n}(Component);\n\nexport default connect(function (state) {\n  return {\n    logged: state.accounts.get(\"logged\"),\n    currentUserid: state.accounts.get(\"username\") // userNickname,profileImage, ... 와 같은 정보를 받아와야 함(TODO)\n\n  };\n}, function (dispatch) {\n  return {\n    BaseActions: bindActionCreators(baseActions, dispatch)\n  };\n})(ProfileContainer);","map":{"version":3,"sources":["/Users/ruby/Desktop/수업/2020-1/벤창웹2/frontend/src/containers/profile/ProfileContainer.js"],"names":["React","Component","connect","bindActionCreators","Redirect","ProfileBody","baseActions","ProfileContainer","state","redirect","clickAddButton","setState","props","logged","currentUserid","userid","isMyProfile","accounts","get","dispatch","BaseActions"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AAEA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,oBAA7B,C,CAEA;AACA;;IAEMC,gB;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,QAAQ,EAAE;AADJ,K;;UAGRC,c,GAAiB,YAAM;AACrB,aAAO,MAAKC,QAAL,CAAc;AAAEF,QAAAA,QAAQ,EAAE;AAAZ,OAAd,CAAP;AACD,K;;;;;;;6BAEQ;AACP;AACA;AACA;AAHO,wBAImC,KAAKG,KAJxC;AAAA,UAICC,MAJD,eAICA,MAJD;AAAA,UAISC,aAJT,eAISA,aAJT;AAAA,UAIwBC,MAJxB,eAIwBA,MAJxB;AAKP,UAAMC,WAAW,GAAGH,MAAM,IAAIC,aAAa,KAAKC,MAAhD;AALO,UAMCN,QAND,GAMc,KAAKD,KANnB,CAMCC,QAND;AAOP,UAAIA,QAAJ,EAAc,OAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACd,aACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,WAAD;AACE,QAAA,WAAW,EAAEO,WADf;AAEE,QAAA,MAAM,EAAED,MAFV;AAGE,QAAA,cAAc,EAAE,KAAKL,cAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AASD;;;;EAzB4BT,S;;AA4B/B,eAAeC,OAAO,CACpB,UAAAM,KAAK;AAAA,SAAK;AACRK,IAAAA,MAAM,EAAEL,KAAK,CAACS,QAAN,CAAeC,GAAf,CAAmB,QAAnB,CADA;AAERJ,IAAAA,aAAa,EAAEN,KAAK,CAACS,QAAN,CAAeC,GAAf,CAAmB,UAAnB,CAFP,CAGR;;AAHQ,GAAL;AAAA,CADe,EAMpB,UAAAC,QAAQ;AAAA,SAAK;AACXC,IAAAA,WAAW,EAAEjB,kBAAkB,CAACG,WAAD,EAAca,QAAd;AADpB,GAAL;AAAA,CANY,CAAP,CASbZ,gBATa,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport ProfileBody from \"components/profile/ProfileBody\";\nimport * as baseActions from \"store/modules/base\";\n\n// TODO: 서버에서 프로필을 보려는 유저의 정보를 모두 받아온 뒤 profileBody의 props로 넘겨주어야 한다\n// TODO: 존재하지 않는 유저면 프로필 없음 페이지로 redirection 해야함\n\nclass ProfileContainer extends Component {\n  state = {\n    redirect: false\n  };\n  clickAddButton = () => {\n    return this.setState({ redirect: true });\n  };\n\n  render() {\n    // currentUserid: 로그인한 유저의 아이디\n    // userid: 프로필 페이지 유저의 아이디\n    // 프로필 페이지는 내가 보든 남이 보든 똑같이 생겼지만 내 프로필 페이지라면 게시글을 올릴 수 있는 버튼 등을 활성하화기 위하여 isMyProfile 값을 넣어준다\n    const { logged, currentUserid, userid } = this.props;\n    const isMyProfile = logged && currentUserid === userid;\n    const { redirect } = this.state;\n    if (redirect) return <Redirect to=\"/uploadBeat\" />;\n    return (\n      <React.Fragment>\n        <ProfileBody\n          isMyProfile={isMyProfile}\n          userid={userid}\n          clickAddButton={this.clickAddButton}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default connect(\n  state => ({\n    logged: state.accounts.get(\"logged\"),\n    currentUserid: state.accounts.get(\"username\")\n    // userNickname,profileImage, ... 와 같은 정보를 받아와야 함(TODO)\n  }),\n  dispatch => ({\n    BaseActions: bindActionCreators(baseActions, dispatch)\n  })\n)(ProfileContainer);\n"]},"metadata":{},"sourceType":"module"}